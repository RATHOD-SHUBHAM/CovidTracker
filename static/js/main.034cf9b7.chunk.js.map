{"version":3,"sources":["InfoBox.js","infoboxutil.js","maputil.js","Map.js","Table.js","tableutil.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","isGreen","isRed","active","props","Card","onClick","className","CardContent","Typography","color","PrettyPrintStat","stat","numeral","format","caseTypeColors","hex","multiplier","recovered","deaths","showDataOnMap","data","caseType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","url","attribution","Table","sortData","sort","a","b","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipformat","yAxes","gridLines","ticks","callback","index","values","buildCharData","lastDataPoint","charData","date","newDataPoint","x","y","push","console","log","LineGraph","useState","setdata","useEffect","fetch","then","responce","json","fetchData","length","datasets","backgroundColor","borderColor","App","setcountries","setcountry","setcountryInfo","tableData","settableData","setcaseType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setmapCountries","response","name","iso2","sortedData","getCountriesData","FormControl","Select","variant","onChange","event","countryCode","target","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.034cf9b7.chunk.js","sourcesContent":["import React from 'react'\nimport {Card,CardContent, Typography} from '@material-ui/core';\nimport \"./InfoBox.css\"\n\n// we use destructing in the props\nfunction InfoBox({title, cases, total,isGreen, isRed,active, ...props}) {\n    return (\n        // Its always important to give the correct class name\n        <Card \n            // this i for onclick\n            onClick = {props.onClick}\n            // info box -- selected will say at this class you are active\n            // className = \"infoBox\"  -> can be written below, inorder to make the card active when clicked\n            // In bem style we use -- if it is a element modifier else we use __ if it is a component\n            // active && \"infoBox--selected -> this means if active select infoBox--selected\n            className = {`infoBox ${active && \"infoBox--selected\"} ${isGreen && \"infoBox--isGreen\"} ${isRed && \"infoBox--isRed\"}`}\n\n        >\n            <CardContent>\n                {/* Title */}\n                <Typography className = \"infoBox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n                {/* No of cases */}\n                {/* change the color of the cases */}\n                {/* <h2 className = \"infoBox__cases\">{cases}</h2> */}\n                {/* this can be written as */}\n                <h2 className = {`infoBox__cases ${isGreen && \"infoBox__cases--green\"} ${isRed && \"infoBox__cases--red\"} `}>{cases}</h2>\n                {/* total number */}\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {total} - Total.\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport numeral from \"numeral\";\n\nexport const PrettyPrintStat = (stat) =>\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import { Circle, Popup } from \"react-leaflet\";\n// this is a circle from interactive tootltip\n// this is a Popup from interactive tool tip\nimport React from \"react\";\nimport numeral from \"numeral\";\n// Numeral format the number in certain way\n\n// Dictionary for my radius,\n//  it has 3 keys. Cases, recoverd and deaths.\n\nconst caseTypeColors = {\n    cases: {\n        // hex: \"#ffa500\",// color for cirlce  // color orange\n        hex: \" #0000ff\",\n        multiplier: 800,    // size of the circle\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        // hex: \"#3cf900\",\n        multiplier: 1200,\n    },\n    deaths: {\n        // hex: \"#fb4443\",\n        hex: \"#CC1034\",\n        multiplier: 2000,\n    },\n};\n\n\n\n// This is for the Map to draw circle with interactive tooltips.\nexport const showDataOnMap = (data, caseType) => (\n    // for each element in data\n    data.map(country => (\n        // here i say draw a circle. Circle takes 5 attribute. Center,Color,FillColor,FillOpacity and radius\n        <Circle\n            center = {[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity = {0.4} //slightly transperant\n            // My radius size and color should change based on the death and recovery. So we will make a dictionary on top for it.\n            pathOptions = {{\n                color: caseTypeColors[caseType].hex,\n                fillColor: caseTypeColors[caseType].hex,\n            }}\n            \n        \n            // radius size logic is like with more cases the circle should become bigger\n            // so size of radius = no of cases * number of cases // so as the number of cases increases the size of radius also increases\n            // also we multiply it with multiplier for different caseType\n            radius ={\n                Math.sqrt(country[caseType]/10) * caseTypeColors[caseType].multiplier\n            }\n        >\n            {/* now when we tap the circle we need a popup */}\n            <Popup>\n                <div className= \"info_container\">\n                    {/* first div is pretty much for the background */}\n                    {/* careful the style is inside of the div tag and not in Between */}\n                    <div className=\"info_flag\" style = {{backgroundImage: `url(${country.countryInfo.flag})`}}>   \n                    </div>\n\n                    {/* Name of the country */}\n                    <div className=\"info_name\">\n                        {country.country}\n                    </div>\n\n                    {/* Number of cases */}\n                    <div className=\"info_confirmed\">\n                        Cases: {numeral(country.cases).format(\"0.0\")}\n                    </div>\n\n                    {/* Number of recovered */}\n                    <div className=\"info_recovered\">\n                        Recovered: {numeral(country.recovered).format(\"0.0\")}\n                    </div>\n\n                    {/* Number of death */}\n                    <div className=\"info_deaths\">\n                        Deaths: {numeral(country.deaths).format(\"0.0\")}\n                    </div>\n                </div>\n            </Popup>\n\n        </Circle>\n    ))\n);","// map is now replaced to MapContainers. And mapContainers are immutable. Once set to certain value cant be changed.\nimport React from 'react';\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\n// this is for styling\nimport \"./Map.css\";\nimport {showDataOnMap} from \"./maputil.js\";\n\n// This function is to make Map container Mutable.\nfunction Map({ countries,center,zoom,caseType}) {\n\n    function ChangeView({center,zoom}){\n        const map = useMap();\n        map.setView(center,zoom);\n        return null;\n    }\n\n    return (\n        <div className=\"map\">\n            <MapContainer\n                caseType = {caseType}\n                className = \"map\"\n                center = {center}\n                zoom = {zoom}\n                scrollWheelZoom = {false}\n            >\n                <ChangeView center = {center} zoom={zoom}/>\n                {/* Once we add the Tilelayer  we get a button like thing on the map */}\n                {/* Then it will disapper once we import leaflet css in app.js */}\n                <TileLayer\n                    url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMaps</a> contributors'\n                />\n\n                {/* I need some kind of function that will loop through and draw a bunch of circle on the map */}\n                {/* the function will be in maputil.js */}\n                {showDataOnMap(countries,caseType)}\n            </MapContainer>   \n        </div>\n    );\n}\n\nexport default Map;\n","import React from 'react'\n// create another file table.css\nimport './Table.css';\nimport numeral from \"numeral\";\n//\nfunction Table({countries}) {\n    return (\n        // <div className = \"table\">\n        //     {/* for every single country in countries return  data as table*/}\n        //     {countries.map(country => (\n        //         <tr>\n        //             <td>{country.country}</td>\n        //             <td>{country.cases}</td>\n        //         </tr>\n        //     ))}\n        // </div>\n\n        // the entire above code can be written using destructuring.\n\n        // we got to sort the data based on cases. So we create a seperate file and do it there.\n\n        <div className=\"table\">\n            {countries.map(({country,cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    {/* .format will add comma */}\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                </tr>\n            ))}\n\n        </div>\n    )\n}\n\nexport default Table\n","\n// this is not a component. But just a utility file holding a helper function.\n\n// create a function. which takes  some data and sort.\n\nexport const sortData = (data) => {\n    // copy the data into a array\n    const sortedData = [...data]\n\n    // looping through the entire list. Imagine the first element is 'a' being compared with second element 'b' and so on.\n\n    // sortedData.sort((a,b) => {\n    //     if (a.cases > b.cases) {\n    //         return -1;\n    //     }\n    //     else {\n    //         return 1;\n    //     }\n\n    \n    // }\n    // return to App.js\n    // return sortedData;\n\n    // or we can just do this\n    //  if a is greater than b dont do anything else sort a and b\n    return sortedData.sort((a,b) => (a.cases > b.cases ?  -1 : 1));\n\n}","import React, {useState, useEffect} from 'react';\n// this will give us the line component\nimport { Line } from 'react-chartjs-2';\nimport numeral from \"numeral\";\n\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point:{\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips:{\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function(tooltipItem, data){\n                return numeral(tooltipItem.value).format(\"+0.0\");\n            },\n        },\n    },\n    // scales are very important\n    scales:{\n        xAxes: [\n            {   // the type is the time we want\n                type: \"time\",\n                // the time should be in a format\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipformat: \"ll\",\n                },\n            },\n        ],\n        yAxes:[\n            {\n                // dont show the Y axis gridlines\n                gridLines:{\n                    display: false,\n                },\n                ticks: {\n                    //Include a dollar sign in the ticks\n                    callback: function (value,index,values){\n                        return numeral(value).format(\"0a\");\n                    },\n\n                },\n            },\n        ],\n    },\n};\n\n\n\n// return the number of cases in last 30 days.\n// /v3/covid-19/historical/all\n// and the url for it it\n// https://disease.sh/v3/covid-19/historical/all?lastdays=30\n\n\n// Take the data that we got and transform it into x and y.\n// https://www.chartjs.org/docs/latest/charts/line.html\n// data: [{\n//     x: 10,\n//     y: 20\n// }, {\n//     x: 15,\n//     y: 10\n// }]\n// x for us is the date and \n//y is the total cases \n//that we get from data requested from URL below\nconst buildCharData = (data, caseType = \"cases\") => {\n    const charData = [];\n    let lastDataPoint;  // this is to hold the new cases\n    for (let date in data.cases) {\n        if (lastDataPoint){\n            let newDataPoint = {\n                x: date,\n                y: data[caseType][date] - lastDataPoint // that will take the cases at current date and subtract with the cases in the previous date.\n            }\n            charData.push(newDataPoint);    // append it to the array\n        }\n        lastDataPoint = data[caseType][date];\n        console.log(lastDataPoint);\n    }\n    return charData;\n};\n\nfunction LineGraph({caseType}) {\n    const [data, setdata] = useState({});\n\n    useEffect(() => {\n        const fetchData = async() => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n            // Carefull json has a (). If we miss that then we get an error.\n            .then((responce) => responce.json())\n            .then((data) => {\n                console.log(\"the data is : \",data);\n                const charData = buildCharData(data, caseType);\n                setdata(charData);\n            });\n        };\n        \n        fetchData();\n    }, [caseType]);\n\n    return (\n        <div>\n        {/* in order to render line graph we need line data and options */}\n        {/* data is to be fetched adn option is like CSS property  */}\n        \n        {/* careful with that data?.length > 0 */}\n        {/* There is a point in  the begining where data is not populated so we got to check that */}\n        {/* careful with line syntax */}\n        {data?.length > 0 && (\n            <Line\n                data = {\n                    {\n                        datasets: [{\n                            backgroundColor: \"rgba(204,16,52,0.5)\",\n                            borderColor: \"#CC1034\", \n                            data: data,\n                            }]\n                    }\n                }\n                options = {options}\n            />\n\n        )}     \n        </div>\n    );\n}\n\nexport default LineGraph;\n","import './App.css';\nimport React, { useState, useEffect} from 'react';\nimport {\n  MenuItem,\n  Select,\n  FormControl,\n  Card,\n  CardContent,\n} from '@material-ui/core';\n\n// importing the file InfoBox.js\nimport InfoBox from './InfoBox.js';\nimport {PrettyPrintStat} from \"./infoboxutil.js\";\n\n// import map.\nimport Map from './Map.js';\n// leaflet for map\nimport \"leaflet/dist/leaflet.css\"\n\n// import table\nimport Table from './Table.js';\n\n//import the table util as we are sorting and passing the data\nimport { sortData } from \"./tableutil.js\";\n\nimport LineGraph from \"./LineGraph.js\"\n\n\n// ------------------------- ---- All Import Ends Here ---------- -- -----------------------------\n\n\n\n\n\n\n// ------------------------- ---- All State Begin Here ---------- -- -----------------------------\n\nfunction App() {\n  // Manually like this will take a lot of time so we will use API \n  const [countries, setcountries] = useState([]);\n\n  // Remeber which option is being selected.\n  const [country, setcountry] = useState('WorldWide');\n\n  //remember a specific country information\n  // storing the entire dictionary\n  const [countryInfo, setcountryInfo] = useState({});\n\n\n  // This is for tables\n  const[tableData, settableData] = useState([]);\n\n  // this is for cases;\n  const[caseType, setcaseType] =  useState(\"cases\");\n  // state for map and line graph to change onClick\n  // cases is being used as default or intial value when we lookup the app\n  // const [caseType, setcaseType] = useState(\"cases\")\n  // but then casetype is already declared fopr cases so we use that\n\n  // this is for map center and map zoom\n  // coordinates are the center of the ocean\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setmapCountries] = useState([]);\n\n  \n\n\n// ------------------------- ---- All State Ends Here ---------- -- -----------------------------\n\n\n\n\n\n// ------------------------- ---- All useEffect Begin Here ---------- -- -----------------------------\n\n\n  // Making a Api call ==> disease.sh website\n  // https://disease.sh/v3/covid-19/all\n  // https://disease.sh/v3/covid-19/countries\n\n  // USEEFFECT is a hook. It runs a piece of code based on a given information.\n  // We use Async method in USEEFFECT here.\n  // we will send a request to server then wait for it and do something with that information\n  useEffect(() => {\n    const getCountriesData = async () => {\n      // first fetch the data\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      // then when it comes back with the responce, first take the json from it\n      .then((response) => response.json())\n      // once we got the responce. We set the countries\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,              // United states, United Kingdom, India\n            value: country.countryInfo.iso2    // USA, UK, IN\n          }\n        ));\n        // we are setting the countries with the countries that we got above\n        // console.log(\"the country info is: \",countries);\n        setcountries(countries);\n\n        // Adding this piece of code here because only this useeffect fetch the information fo the country\n        // console.log(\"the data info is: \",data);\n        // sortData is a function coming from tableutil.js  \n        const sortedData = sortData(data);\n        settableData(sortedData);\n\n        // for circles in map i want all of the data of all countries\n        setmapCountries(data);\n      });\n    };\n    // call the function we created above\n    getCountriesData();\n  }, []);\n\n\n  // OnChange function which acts as a listner\n  const onCountryChange = (event) => {\n    // basically this is a onclick event which return a object.\n    //console.log(\"the event is : \",event); \n    const countryCode = event.target.value;\n    // console.log(\"the country code is \", countryCode);\n\n    setcountry(countryCode);\n\n\n    // On clicking . we need to pull information abput that coutry and display in cases, recoverd and deaths.\n    // if we click world wide then i need to fetch information form all url else from country url\n    const url = countryCode === \"WorldWide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    fetch(url)\n    .then (response => response.json())\n    .then(data => {\n      // this is entire dictionary of that particular function\n      // console.log(\"the data is: \",data);\n      // setcountry(countryCode);\n      setcountryInfo(data);\n\n      //once we change the country in drop down. We can change our map location as well\n      // console.log([data.countryInfo.lat, data.countryInfo.long]);\n      countryCode === \"WorldWide\" ? setMapCenter([34.80746,-40.4796]):setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n  // console.log(\"Country info is: \",countryInfo);\n\n  // this will show the total cases for world wide\n  // Without this the code will load but no stats will be seen. This will make the first inital load for worldwide\n  // Note the code above ie.(fetch url) will load only when something is clicked.\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then (response => response.json())\n    .then ((data) => {\n      setcountryInfo(data);\n    });\n  }, [])\n\n\n  // ------------------------- ---- All useEffect Ends Here ---------- -- -----------------------------\n\n\n\n\n  return (\n    // Bem naming convention => First name is the component and the second name is the element\n    <div className=\"app\">\n\n      {/* Left Container */}\n      <div className = \"app__left\">\n\n        {/* Header */}\n        {/* {Title} + Select input  dropdown field*/}\n\n        <div className = \"app__header\">\n          {/* <h1>My First actual project in React JS</h1> */}\n          <h1>Covid-19 Tracker <h6>by Shubham Shankar</h6></h1>\n\n          {/* This is the Drop Down */}\n          <FormControl className =\"app__dropdown\">  {/* This is bem style ==> App is the Component and dropdown is the element we want */}\n            <Select variant = \"outlined\" onChange={onCountryChange} value = {country} >\n              {/* default drop down value is set to worlkdwide with country state*/}\n\n              {/* WorldWide option is added manually as it doesnot come along with our api call */}\n              <MenuItem value = \"WorldWide\">WorldWide</MenuItem>\n\n              {/* Loop through all the countries and show a drop down list with country name based on the country value */}\n              {/* this will receive the data from from useeffect above */}\n\n              {countries.map((country) => (\n                <MenuItem value = {country.value}>{country.name}</MenuItem>\n              ))}\n\n            </Select>\n          </FormControl>\n        </div>\n      \n\n\n        {/* {InfoBoxs} */}\n        <div className = \"app__stat\">\n\n          {/* title: corona virus cases */}\n          {/* title: Corona virus recoveries */}\n          {/* title: Corona virus deaths */}\n          {/* In dictionary we dont care about the sequence doesnt matter */}\n\n\n          {/* active box will say if caseType is cases the  casebox is active, \n          similarly if recovered is active then recoverd box is active */}\n\n          <InfoBox \n            // active box\n            active = {caseType === \"cases\"}\n            // onclick makes the card clickale\n            onClick = {e => setcaseType('cases')}\n            // this display the content of the card\n            title=\"Coronavirus Cases\" \n            total = {PrettyPrintStat(countryInfo.cases)} \n            cases = {PrettyPrintStat(countryInfo.todayCases)}\n          >\n          </InfoBox>\n          <InfoBox \n          // active box\n            isGreen // just a isGreen which helps change the box color\n            active = {caseType === \"recovered\"}\n              // onclick makes the card clickale\n            onClick = {e => setcaseType('recovered')}\n            // this display the content of the card\n            title=\"Recovered\" \n            cases={PrettyPrintStat(countryInfo.todayRecovered)} \n            total= {PrettyPrintStat(countryInfo.recovered)}\n          >\n          </InfoBox>\n          <InfoBox \n          // it will come inside InfoBox sees isRed then in  info.js it will maych then condition and call infoBox--isRed\n            isRed // just a isGreen which helps change the box color\n            // active box\n            active = {caseType === \"deaths\"}\n            // onclick makes the card clickale\n            onClick = {e => setcaseType('deaths')}\n            // this display the content of the card\n            title=\"Deaths\" \n            cases={PrettyPrintStat(countryInfo.todayDeaths)} \n            total ={PrettyPrintStat(countryInfo.deaths)}\n          >\n          </InfoBox>\n\n        </div>\n\n        {/* {Maps} */}\n        {/* render map */}\n        <Map \n        // without center and zoom the app kind off crash\n          caseType = {caseType}  // this is for changing the map based on cards.\n          countries = {mapCountries}\n          center = {mapCenter}\n          zoom = {mapZoom}\n        />\n      </div> \n      {/* left container ends here */}\n\n      {/* Right Container */}\n      <div className = \"app_right_div\">\n        <Card className = \"app__right\">\n          <CardContent>\n\n            {/* {Tables} => To list out different countries */}\n            <h3>Live Cases by Country</h3>\n            {/* we pass a variable called table data */}\n            <Table countries = {tableData}></Table>\n\n            \n            {/* {Graphs} */}\n            {/* this will be a line graph */}\n            {/* linegraph.js */}\n            <div className = \"app_right_linegraph\">\n              <h3 className = \"app_right_graphtitle\">World Wide New {caseType}: </h3>\n              <LineGraph className = \"app_right_graph\" caseType = {caseType}/>\n            </div>\n\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}